I will be posting my code as i work through edabit
Create a function that finds the maximum range of a triangle's third edge, where the side lengths are all integers.
function nextEdge(side1, side2) {
	return ((side1 + side2)-1);
}
You are given 2 out of 3 angles in a triangle, in degrees.

Write a function that classifies the missing angle as either "acute", "right", or "obtuse" based on its degrees.
function missingAngle(angle1, angle2) {
	var angle3 = (180-(angle1 + angle2));
	if(angle3 > 90) {
		return "obtuse";
	} else if (angle3 == 90) {
		return "right";
	} else return "acute";
}
Create a function that takes a number as an argument and returns the square root of that number cubed.
function cubeSquareRoot(num) {
	var n = Math.sqrt(num);
	return (n * n * n);
}
Create a function that takes an array of numbers and returns only the even values.
function isEven(x) {
	return(x % 2 == 0);
}
function noOdds(arr) {
	var newArray = [];
	for(var i = 0; i < arr.length; i++){
		var input = arr[i];
		if(isEven(input) == true){
			newArray.push(input);
		} else continue;
	} return newArray;
}
Create a function that takes an array of numbers and return the first and last elements as a new array.
function firstLast(arr) {
	return [arr[0], arr[arr.length-1]];
}
Create a function that takes a string and returns the word count. The string will be a sentence.
function countWords(str) {
	return str.split(" ").length;
}
Create a function that takes a number (from 1 - 60) and returns a corresponding string of hyphens
function Go(num) {
	return "-".repeat(num);
}
A number added with its additive inverse equals zero. Create a function that returns an array of additive inverses.
function additiveInverse(arr) {
	return arr.map((element) => element *= (-1));
}
Write a function that searches an array of names (unsorted) for the name "Bob" and returns the location in the array. If Bob is not in the array, return -1.
function findBob(names) {
	if(names.indexOf("Bob") != (-1)){
		return names.indexOf("Bob");
	} else return (-1);
}
Create a function that takes an array and returns the difference between the biggest and smallest numbers.
function diffMaxMin(arr) {
	var mx = Math.max(...arr);
	var mn = Math.min(...arr);
	return (mx - mn);
}
Create a function that converts a date formatted as MM/DD/YYYY to YYYYDDMM.
function formatDate(date) {
	var newArray = date.split("/");
	var answer = newArray.reverse();
	return answer.join("");
}
Create a function that takes a string and returns a string with its letters in alphabetical order.
function AlphabetSoup(str) {
	return str.split("").sort().join("");
}
Create a function that takes an array of strings and returns the words that are exactly four letters
function isFourLetters(arr) {
	return (arr.filter(word => (word.length == 4)));
}

Create a function that removes the first and last characters from a string.

function removeFirstLast(str) {
	if(str.length > 2){
		var answer = str.slice(1,-1);
		return answer;
	} return str;
}

Create a function to calculate the determinant of a 2 * 2 matrix. The determinant of the following matrix is: ad - bc

function calcDeterminant(matrix) {
	var newArray = matrix.flat();
	return ((newArray[0] * newArray[3]) - (newArray[1] * newArray[2]));
}
Take a list of names.
Add "Hello" to every name.
Make one big string with all greetings.
The solution should be one string with a comma in between every "Hello (Name)".

function greetPeople(names) {
	var withHello = (names.map((element) => "Hello " + element));
	return withHello.join(", ");


}

Given an array of values return the standard deviation rounded to the nearest hundredth.

function addArray(a, b){
	return a + b;
}

function standardDeviation(arr) {
	var lengthOfArr = arr.length;
	var mean = (arr.reduce(addArray)) / (lengthOfArr);
	var diff = (arr.map((element) => Math.abs((element) - mean)));
	var roundedDiffAbs = (diff.map((element) => Math.round(element)));
	var squareddRDA = (roundedDiffAbs.map((element) => element * element));
	var reducedSRDA = (squareddRDA.reduce(addArray));
	var dividedRSRDA = reducedSRDA / lengthOfArr;
	var answer = Math.sqrt(dividedRSRDA);
	var roundedAnswerStr = answer.toFixed(2);
	return parseFloat(roundedAnswerStr);
}

Given a number, return the difference between the maximum and minimum numbers that can be formed when the digits are rearranged.

 function rearrangedDifference(num) {
 	var newArrayMax = num.toString().split("").sort().reverse().join("");
 	var newArrayMin = num.toString().split("").sort().join("");
 	var highest = parseFloat(newArrayMax);
 	var lowest = parseFloat(newArrayMin);
 	return highest - lowest;
 }

Create a function that determines whether a shopping order is eligible for free shipping. An order is eligible for free shipping if the total cost of items purchased exceeds $50.00.

function freeShipping(order) {
	function added(x, y) {
		return x + y;
	}
	let total = Object.values(order).reduce(added);
	return total > 50;
}
Create a function that returns the number of decimal places a number (given as a string) has. Any zeros after the decimal point count towards the number of decimal places

function getDecimalPlaces(num) {
	if(num.indexOf(".") == -1){
		return 0;
	} else {
		return ((num.length - 1) - (num.indexOf(".")));
	}
}
Create a function that takes two number strings and returns their sum as a string
If any input is "", undefined or null, return "Invalid Operation"

function add(num1, num2) {
	if(!num1 || !num2) {
		return 'Invalid Operation';
	}
	return (parseInt(num1) + parseInt(num2)).toString();
}

Given a total due and an array representing the amount of change in your pocket, determine whether or not you are able to pay for the item. Change will always be represented in the following order: quarters, dimes, nickels, pennies.

function changeEnough(change, amountDue) {
	let q = change[0];
	let d = change[1];
	let n = change[2];
	let p = change[3];
	return amountDue <= ((q * .25) + (d * .1) + (n * .05) + (p * .01));
}

Let's say we wanted to change the number of pages that Google could skip to. Create a function where given a number of pages n, return the word "Google" but with the correct number of "o"s.

function googlify(n) {
	if(n > 1){
	return ("G" + "o".repeat(n) + "gle");
  } return "invalid";
}
Wild Roger is participating in a Western Showdown, meaning he has to draw (pull out and shoot) his gun faster than his opponent in a gun standoff.

Given two strings,p1 and p2, return which person drew their gun the fastest. If both are drawn at the same time, return "tie".

function showdown(p1, p2) {
	let p1Draw = p1.indexOf("Bang!");
	let p2Draw = p2.indexOf("Bang!");
	if(p1Draw < p2Draw){
		return "p1";
	}else if(p1Draw === p2Draw){
		return "tie";
	}
	return "p2";
}

Create a function that takes in two arrays: the array of user-typed words, and the array of correctly-typed words and outputs an array containing 1s (correctly-typed words) and -1s (incorrectly-typed words).

function correctStream(user, correct) {
	let output = [];
	for(let i = 0; i < user.length; i++){
		if(user[i] === correct[i]){
			output.push(1);
		}
		else output.push(-1);
	}
	return output;
}
