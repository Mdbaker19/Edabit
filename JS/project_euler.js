// If we list all the natural numbers below 10 that are multiples of 3 or 5,
// we get 3, 5, 6 and 9. The sum of these multiples is 23.
//
// Find the sum of all the multiples of 3 or 5 below 1000.

function sumOfMult(x){
    let sum = 0;
    for(let i = 0; i < x; i++){
        if(i % 3 === 0){
            sum += i;
        } else if(i % 5 === 0){
            sum += i;
        } else {
            continue;
        }
    }
    return sum;
}

// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
//     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms

// function evenSumOfFibonacciToFourMil(max){
//     let sumOfEvens;
//     let fibArray = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
//     let n = fibArray.length - 1;
//     let next = (fibArray[n]) + (fibArray[n - 1]);
//     fibArray.push(next);
//
//     let evenFibArray = fibArray.filter((a) => a % 2 === 0);
//     sumOfEvens = evenFibArray.reduce((a, b) => a + b);
//     return sumOfEvens;
// }
// max is 4,000,000 in this problem
//console.log(evenSumOfFibonacciToFourMil(4000000));

function evenFibSum(max){
    let count = 0;
    let fibArray = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
    for(let i = 0; count < max; i++){
        let n = fibArray.length - 1;
        let next = (fibArray[n]) + (fibArray[n - 1]);
        fibArray.push(next);
        var evenFibArray = fibArray.filter((a) => a % 2 === 0);
        count = evenFibArray.reduce((a, b) => a + b);
    }
    return evenFibArray.reduce((a, b) => a + b);
}

console.log(evenFibSum(4000000));
